!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Build	searcher.cpp	/^	bool Index::Build(const std::string file_path)$/;"	f	class:searcher::Index
BuildForward	searcher.cpp	/^	const DocInfo* Index::BuildForward(const std::string& line)$/;"	f	class:searcher::Index
BuildInverted	searcher.cpp	/^	void Index::BuildInverted(const DocInfo* doc_info)$/;"	f	class:searcher::Index
CutWord	searcher.cpp	/^	void Index::CutWord(std::string& input, std::vector<std::string>& output)$/;"	f	class:searcher::Index
DICT_PATH	searcher.h	/^		const char* const DICT_PATH = "..\/dict\/jieba.dict.utf8";$/;"	m	class:searcher::Index
DocInfo	searcher.h	/^	struct DocInfo$/;"	s	namespace:searcher
EQ	searcher.h	16;"	d
GetDocInfo	searcher.cpp	/^	const DocInfo* Index::GetDocInfo(int64_t Id)$/;"	f	class:searcher::Index
GetInvertedList	searcher.cpp	/^	const std::vector<Weigth>*  Index::GetInvertedList(const std::string& key)$/;"	f	class:searcher::Index
HMM_PATH	searcher.h	/^		const char* const HMM_PATH = "..\/dict\/hmm_model.utf8";$/;"	m	class:searcher::Index
IDF_PATH	searcher.h	/^		const char* const IDF_PATH = "..\/dict\/idf.utf8";$/;"	m	class:searcher::Index
Index	searcher.cpp	/^	Index::Index()$/;"	f	class:searcher::Index
Index	searcher.h	/^	class Index$/;"	c	namespace:searcher
STOP_WORD_PATH	searcher.h	/^		const char* const STOP_WORD_PATH = "..\/dict\/stop_words.utf8";$/;"	m	class:searcher::Index
Searcher	searcher.h	/^	class Searcher$/;"	c	namespace:searcher
USER_DICT_PATH	searcher.h	/^		const char* const USER_DICT_PATH = "..\/dict\/user.dict.utf8";$/;"	m	class:searcher::Index
Weigth	searcher.h	/^	struct Weigth$/;"	s	namespace:searcher
content	searcher.h	/^		std::string content;$/;"	m	struct:searcher::DocInfo
doc_id	searcher.h	/^		uint64_t doc_id;$/;"	m	struct:searcher::Weigth
forward_index_	searcher.h	/^			std::vector<DocInfo> forward_index_;$/;"	m	class:searcher::Index
id	searcher.h	/^		uint64_t id;$/;"	m	struct:searcher::DocInfo
inverted_index_	searcher.h	/^			std::unordered_map<std::string, std::vector<Weigth>> inverted_index_;$/;"	m	class:searcher::Index
jieba_	searcher.h	/^			cppjieba::Jieba jieba_;$/;"	m	class:searcher::Index
main	test.cpp	/^int main()$/;"	f
searcher	searcher.cpp	/^namespace searcher$/;"	n	file:
searcher	searcher.h	/^namespace searcher$/;"	n
title	searcher.h	/^		std::string title;$/;"	m	struct:searcher::DocInfo
url	searcher.h	/^		std::string url;$/;"	m	struct:searcher::DocInfo
weigth	searcher.h	/^		int weigth;\/\/权重，为排序做准备$/;"	m	struct:searcher::Weigth
